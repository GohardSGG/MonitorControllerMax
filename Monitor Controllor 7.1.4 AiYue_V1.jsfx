desc:7.1.4 监听控制 AiYue
//tags: Monitor Control
//author: GoHardSGG
//Version: V1


//---------------------- 主音量 --------------------------
slider99:100<0,100,1>Master Volume (%)
slider100:0<0,1,1{Off,On}>DIM
slider101:0<0,1,1{Off,On}>Mute Master
slider102:0<0,1,1{Off,On}>LFE +10dB

//---------------------- 每个音箱的SOLO控制 ---------------------- 
slider31:0<0,1,1{Off,On}>Solo_L
slider32:0<0,1,1{Off,On}>Solo_R
slider33:0<0,1,1{Off,On}>Solo_C
slider34:0<0,1,1{Off,On}>Solo_LFE
slider35:0<0,1,1{Off,On}>Solo_LSS
slider36:0<0,1,1{Off,On}>Solo_RSS
slider37:0<0,1,1{Off,On}>Solo_LRS
slider38:0<0,1,1{Off,On}>Solo_RRS
slider39:0<0,1,1{Off,On}>Solo_LTF
slider40:0<0,1,1{Off,On}>Solo_RTF
slider41:0<0,1,1{Off,On}>Solo_LTB
slider42:0<0,1,1{Off,On}>Solo_RTB

//---------------------- 输入输出定义 ---------------------
in_pin:Input L
in_pin:Input R
in_pin:Input C
in_pin:Input LFE
in_pin:Input LSS
in_pin:Input RSS
in_pin:Input LRS
in_pin:Input RRS
in_pin:Input LTF
in_pin:Input RTF
in_pin:Input LTB
in_pin:Input RTB

out_pin:Output L
out_pin:Output R
out_pin:Output C
out_pin:Output LFE
out_pin:Output LSS
out_pin:Output RSS
out_pin:Output LRS
out_pin:Output RRS
out_pin:Output LTF
out_pin:Output RTF
out_pin:Output LTB
out_pin:Output RTB


//---------------------- 初始化 ---------------------------
@init
scale = 0.01;


// 初始化Solo状态
Pre_Solo_Active = 0;

//---------------------- 滑动条处理 -----------------------
@slider


Dim_Master          = slider100; // 读取DIM状态
Mute_Master         = slider101;
Level_Master        = (slider99 * scale) * (Dim_Master ? 0.16 : 1) * (Mute_Master ? 0 : 1); // 主音量计算

// 检测是否有任意Solo被激活
Current_Solo_Active = slider31 | slider32 | slider33 | slider34 | 
              slider35 | slider36 | slider37 | slider38 | 
              slider39 | slider40 | slider41 | slider42 ;

// Solo激活时的处理
Current_Solo_Active ?
 (
    // 实时计算Mute状态（不修改原始滑块值）
    Mute_L   = slider31 ? 0 : 1;  // Solo开启时保留状态，否则静音
    Mute_R   = slider32 ? 0 : 1;  
    Mute_C   = slider33 ? 0 : 1;  
    Mute_LFE = slider34 ? 0 : 1;  
    Mute_LSS = slider35 ? 0 : 1;  
    Mute_RSS = slider36 ? 0 : 1;  
    Mute_LRS = slider37 ? 0 : 1;  
    Mute_RRS = slider38 ? 0 : 1;  
    Mute_LTF = slider39 ? 0 : 1;  
    Mute_RTF = slider40 ? 0 : 1;  
    Mute_LTB = slider41 ? 0 : 1;  
    Mute_RTB = slider42 ? 0 : 1;  

) : 
(
    // Solo未激活时，恢复Mute状态
    Mute_L = 1;
    Mute_R = 1;
    Mute_C = 1;
    Mute_LFE = 1;
    Mute_LSS = 1;
    Mute_RSS = 1;
    Mute_LRS = 1;
    Mute_RRS = 1;
    Mute_LTF = 1;
    Mute_RTF = 1;
    Mute_LTB = 1;
    Mute_RTB = 1;
);

@block

//---------------------- 音频处理 -------------------------
@sample

// 应用增益链
spl0  *=  (Current_Solo_Active ? (slider31 ? 1 : 0) : Mute_L) * Level_Master;  //L
spl1  *=  (Current_Solo_Active ? (slider32 ? 1 : 0) : Mute_R) * Level_Master;  // R
spl2  *=  (Current_Solo_Active ? (slider33 ? 1 : 0) : Mute_C) * Level_Master;  // C
spl3  *=  (Current_Solo_Active ? (slider34 ? 1 : 0) : Mute_LFE) * (slider102 ? 3.162 : 1) * Level_Master;  // LFE
spl4  *=  (Current_Solo_Active ? (slider35 ? 1 : 0) : Mute_LSS) * Level_Master;  // LSS
spl5  *=  (Current_Solo_Active ? (slider36 ? 1 : 0) : Mute_RSS) * Level_Master;  // RSS
spl6  *=  (Current_Solo_Active ? (slider37 ? 1 : 0) : Mute_LRS) * Level_Master;  // LRS
spl7  *=  (Current_Solo_Active ? (slider38 ? 1 : 0) : Mute_RRS) * Level_Master;  // RRS
spl8  *=  (Current_Solo_Active ? (slider39 ? 1 : 0) : Mute_LTF) * Level_Master;  // LTF
spl9  *=  (Current_Solo_Active ? (slider40 ? 1 : 0) : Mute_RTF) * Level_Master;  // RTF
spl10 *=  (Current_Solo_Active ? (slider41 ? 1 : 0) : Mute_LTB) * Level_Master;  // LTB
spl11 *=  (Current_Solo_Active ? (slider42 ? 1 : 0) : Mute_RTB) * Level_Master;  // RTB
